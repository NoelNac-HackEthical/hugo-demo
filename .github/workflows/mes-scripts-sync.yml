name: Sync mes-scripts (changed-only, no prune) version master

on:
  repository_dispatch:
    types: [mes-scripts-release]

permissions:
  contents: write
  pull-requests: read

jobs:
  sync:
    runs-on: ubuntu-latest

    env:
      TARGET_BRANCH: ${{ vars.TARGET_BRANCH }}
      DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}

    steps:
      - name: Checkout site
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve TARGET_BRANCH → BRANCH (fallback to default)
        shell: bash
        run: |
          set -euo pipefail
          TB="${TARGET_BRANCH:-}"
          DB="${DEFAULT_BRANCH:-master}"
          BR="${TB:-$DB}"
          echo "TARGET_BRANCH='${TB:-<empty>}'  DEFAULT_BRANCH='$DB'  → BRANCH='$BR'"
          echo "BRANCH=$BR" >> "$GITHUB_ENV"

      - name: Decide target branch & reset from default
        shell: bash
        run: |
          set -euo pipefail
          BRANCH="${TARGET_BRANCH:-$DEFAULT_BRANCH}"

          git fetch --all --prune
          git checkout -B "$BRANCH" "origin/${DEFAULT_BRANCH}"

          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "--- branch reset to origin/${DEFAULT_BRANCH} as $BRANCH"

      - name: Payload preview (optional)
        shell: bash
        run: |
          echo '--- client_payload (truncated) ---'
          cat > payload.json <<'JSON'
          ${{ toJson(github.event.client_payload) }}
          JSON
          jq -c '{scope, scripts, assets:(.assets|keys|length)}' payload.json || cat payload.json
          echo '----------------------------------'

      - name: Sync mes-scripts content (no prune, per-file upsert)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const payload = JSON.parse(fs.readFileSync('payload.json', 'utf8'));

            const owner  = context.repo.owner;
            const repo   = context.repo.repo;
            const branch = process.env.BRANCH || process.env.DEFAULT_BRANCH || 'master';

            const basePath  = 'content/mes-scripts';
            const assetsMap = payload.assets || {};
            const changed   = new Set(payload.scripts || []);

            // Humanize: "mon-nmap" -> "Mon Nmap"; "make_htb" -> "Make Htb"
            function humanizeTitle(s) {
              return String(s)
                .replace(/[-_]+/g, ' ')
                .split(' ')
                .map(w => w ? (w[0].toUpperCase() + w.slice(1)) : w)
                .join(' ');
            }

            // FRONT MATTER + contenu, avec ligne initiale (desc) avant ## Présentation
            function buildMarkdown(scriptName, meta) {
              const ver   = String((meta && meta.version) || '# VERSION');
              const desc  = String((meta && meta.description) || "Résumé court de l'outil.").trim();
              const usage = String((meta && meta.usage) || '').trim();

              const title = humanizeTitle(scriptName);
              const slug  = scriptName; // conservé tel quel
              const repoSlug = "NoelNac-HackEthical/mes-scripts"; // demandé explicitement

              let out = '';
              // --- FRONT MATTER EXACT ---
              out += '---\n';
              out += `title: "${title.replace(/"/g, '\\"')}"\n`;
              out += `slug: "${slug.repl
